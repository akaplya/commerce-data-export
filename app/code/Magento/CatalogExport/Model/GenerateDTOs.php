<?php
/**
 * Copyright © Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */
declare(strict_types=1);

namespace Magento\CatalogExport\Model;

use Magento\DataExporter\Config\ConfigInterface;
use Magento\Framework\Exception\FileSystemException;
use Magento\Framework\Filesystem\Driver\File;
use Nette\PhpGenerator\ClassType;
use Nette\PhpGenerator\PhpFile;
use Nette\PhpGenerator\PsrPrinter;
use Magento\Framework\App\Filesystem\DirectoryList;

/**
 * Class for generating ExportApi DTOs
 */
class GenerateDTOs
{
    /**
     * Output directory for autogenerated export DTOs
     */
    private const EXPORT_DTO_OUTPUT_DIR = '/Magento/CatalogExportApi/Api/Data';

    /**
     * @var File
     */
    private $fileDriver;

    /**
     * @var ConfigInterface
     */
    private $config;

    /**
     * @var DirectoryList
     */
    private $dirList;

    /**
     * @var array
     */
    private $baseConfigEntities;

    /**
     * @param File $fileDriver
     * @param ConfigInterface $config
     * @param DirectoryList $dirList
     * @param array $baseConfigEntities
     */
    public function __construct(
        File $fileDriver,
        ConfigInterface $config,
        DirectoryList $dirList,
        array $baseConfigEntities
    ) {
        $this->fileDriver = $fileDriver;
        $this->config = $config;
        $this->dirList = $dirList;
        $this->baseConfigEntities = $baseConfigEntities;
    }

    /**
     * Generate export DTOs
     *
     * @return void
     * @throws \RuntimeException
     */
    public function execute(): void
    {
        try {
            $outputDir = $this->dirList->getPath(DirectoryList::GENERATED_CODE) . self::EXPORT_DTO_OUTPUT_DIR;
            $baseNamespace = $this->resolveNameSpace($outputDir);
            $parsedEntities = [];
            foreach ($this->baseConfigEntities as $node) {
                $parsedEntities[] = $this->getConfig($node);
            }
            $parsedArray = \array_merge(...$parsedEntities);
            $classesData = $this->prepareDtoClassData($parsedArray, $baseNamespace);
            $this->createDirectory($outputDir);
            $this->generateFiles($classesData, $baseNamespace, $outputDir);
        } catch (\Throwable $e) {
            throw new \RuntimeException('Could not generate ExportApi DTO\'s ' . $e);
        }
    }

    /**
     * Resolve namespace
     *
     * @param string $filePath
     * @return string
     */
    private function resolveNameSpace(string $filePath): string
    {
        $filePath = trim($filePath, DIRECTORY_SEPARATOR);
        return str_replace('/', '\\', strstr($filePath, 'Magento'));
    }

    /**
     * Return entities config.
     *
     * @param string $entity
     * @param array $parsedArray
     * @return array
     */
    private function getConfig(string $entity, $parsedArray = []): array
    {
        $parsedEntity = $this->config->get($entity);
        if ($parsedEntity) {
            $parsedArray[$entity] = $parsedEntity;

            foreach ($parsedEntity['field'] as $field) {
                if (!$this->config->isScalar($field['type'])) {
                    $parsedArray = $this->getConfig($field['type'], $parsedArray);
                }
            }
        }
        return $parsedArray;
    }

    /**
     * Build structure required to build DTO
     *
     * @param array $parsedArray
     * @param string $baseNamespace
     * @return array
     */
    private function prepareDtoClassData(array $parsedArray, string $baseNamespace): array
    {
        $result = [];
        if (empty($parsedArray)) {
            return $result;
        }

        foreach ($parsedArray as $schemaConfig) {
            foreach ($schemaConfig['field'] as &$field) {
                $field['type'] = $this->mapType($field['type'], $baseNamespace);
                $field['name'] = lcfirst(str_replace('_', '', ucwords($field['name'], '_')));
            }
            $result[$schemaConfig['name']] = $schemaConfig['field'];
        }

        return $result;
    }

    /**
     * Map type
     *
     * @param string $type
     * @param string $baseNameSpace
     * @return string
     */
    private function mapType(string $type, string $baseNameSpace): string
    {
        switch ($type) {
            case 'Int':
                $type = 'int';
                break;
            case 'ID':
            case 'String':
                $type = 'string';
                break;
            case 'Boolean':
                $type = 'bool';
                break;
            case 'Float':
                $type = 'float';
                break;
            default:
                $type = '\\' . $baseNameSpace . '\\' . $type;
        }

        return $type;
    }

    /**
     * Create directory
     *
     * @param string $outPutLocation
     * @return void
     * @throws FileSystemException
     */
    private function createDirectory(string $outPutLocation): void
    {
        if (!$this->fileDriver->isExists($outPutLocation)) {
            $this->fileDriver->createDirectory($outPutLocation, 0775);
        }
    }

    /**
     * Generate files
     *
     * @param array $generateArray
     * @param string $baseNameSpace
     * @param string $baseFileLocation
     * @return void
     * @throws FileSystemException
     * @SuppressWarnings(PHPMD.NPathComplexity)
     * @SuppressWarnings(PHPMD.CyclomaticComplexity)
     */
    private function generateFiles(array $generateArray, string $baseNameSpace, string $baseFileLocation): void
    {
        foreach ($generateArray as $className => $phpClassFields) {
            $file = new PhpFile();
            $class = $this->generateClass($className, $baseNameSpace, $file);
            foreach ($phpClassFields as $field) {
                $repeated = $field['repeated'];
                $name = $field['name'];
                $type = $repeated === true ? $field['type'] . '[]' : $field['type'];
                $commentName = preg_replace('/(?<!\ )[A-Z]/', ' $0', $name);
                $this->addProperty($class, $name, $type);
                $this->generateGetter($class, $type, $name, $repeated, $commentName);
                $this->generateSetter($class, $type, $name, $repeated, $commentName);
            }
            $print = new PsrPrinter();
            $this->writeToFile($baseFileLocation . '/' . $className . '.php', $print->printFile($file));
        }
    }

    /**
     * Generate object class
     *
     * @param string $className
     * @param string $baseNameSpace
     * @param PhpFile $file
     * @return ClassType
     */
    private function generateClass(string $className, string $baseNameSpace, PhpFile $file): ClassType
    {
        $file->addComment('Copyright © Magento, Inc. All rights reserved.');
        $file->addComment('See COPYING.txt for license details.');
        $file->setStrictTypes();
        $namespace = $file->addNamespace($baseNameSpace);
        $class = $namespace->addClass($className);
        $class->addComment($className . ' entity');
        $class->addComment('');
        $class->addComment('phpcs:disable Magento2.PHP.FinalImplementation');
        $class->addComment('@SuppressWarnings(PHPMD.BooleanGetMethodName)');
        $class->addComment('@SuppressWarnings(PHPMD.TooManyFields)');
        $class->addComment('@SuppressWarnings(PHPMD.ExcessivePublicCount)');
        $class->addComment('@SuppressWarnings(PHPMD.ExcessiveClassComplexity)');
        $class->addComment('@SuppressWarnings(PHPMD.CouplingBetweenObjects)');
        return $class;
    }

    /**
     * Add a property
     *
     * @param ClassType $class
     * @param string $name
     * @param string $type
     * @return void
     */
    private function addProperty(ClassType $class, string $name, string $type): void
    {
        $property = $class->addProperty($name)->setPrivate();
        $property->addComment('@var ' . $type . '|null');
    }

    /**
     * Generate a getter method
     *
     * @param ClassType $class
     * @param string $type
     * @param string $name
     * @param bool $repeated
     * @param string $commentName
     */
    private function generateGetter(
        ClassType $class,
        string $type,
        string $name,
        bool $repeated,
        string $commentName
    ): void {
        $method = $class->addMethod('get' . ucfirst($name));
        $method->addComment('Get ' . strtolower($commentName));
        $method->addComment('');

        /** Docblock @return */
        $method->addComment('@return ' . $type . '|null');

        /** Return typehint */
        if (true === $repeated) {
            $method->setReturnType('array');
        } else {
            $method->setReturnType($type);
        }
        $method->setReturnNullable();
        $method->addBody('return $this->' . $name . ';');
    }

    /**
     * Generate a setter method
     *
     * @param ClassType $class
     * @param string $type
     * @param string $name
     * @param bool $repeated
     * @param string $commentName
     */
    private function generateSetter(
        ClassType $class,
        string $type,
        string $name,
        bool $repeated,
        string $commentName
    ): void {
        $method = $class->addMethod('set' . ucfirst($name));
        $method->addComment('Set ' . strtolower($commentName));
        $method->addComment('');

        /** Docblock @param */
        $method->addComment('@param ' . $type . '|null $' . $name);
        $method->addComment('@return void');

        /** Variable typehint */
        if (true === $repeated) {
            $method->addParameter($name, null)->setType('array')->setNullable();
        } else {
            $method->addParameter($name, null)
                ->setType($type)
                ->setNullable();
        }
        $method->setReturnType('void');
        $method->addBody('$this->' . $name . ' = $' . $name . ';');
    }

    /**
     * Write to file
     *
     * @param string $fileLocation
     * @param string $output
     * @return void
     * @throws FileSystemException
     */
    private function writeToFile(string $fileLocation, string $output): void
    {
        $resource = $this->fileDriver->fileOpen($fileLocation, 'w');
        $this->fileDriver->fileWrite($resource, $output);
        $this->fileDriver->fileClose($resource);
    }
}
